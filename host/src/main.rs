use json_core::Outputs;
use std::io::Read;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{RDF_CONTAINS_GUEST_ELF, RDF_CONTAINS_GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde_json;
use oxrdf::{Quad, NamedNode, Subject, Term, GraphName};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    let mut file =
        std::fs::File::open("res/profile.ttl").expect("Example file should be accessible");
    let mut data = String::new();
    file.read_to_string(&mut data)
        .expect("Should not have I/O errors");

    let mut query_file =
        std::fs::File::open("res/query.sparql").expect("Example file should be accessible");
    let mut query_string = String::new();
    query_file.read_to_string(&mut query_string)
        .expect("Should not have I/O errors");

    // Start timer
    let start = std::time::Instant::now();
    
    // For example:
    // let input: u32 = 15 * u32::pow(2, 27) + 1;
    let env = ExecutorEnv::builder()
        .write(&data).unwrap()
        .write(&query_string).unwrap()
        .write(
            &Quad::new(
                Subject::NamedNode(NamedNode::new("http://example.com/subject").unwrap()),
                NamedNode::new("http://example.com/predicate").unwrap(),
                Term::NamedNode(NamedNode::new("http://example.com/object").unwrap()),
                GraphName::NamedNode(NamedNode::new("http://example.com/object").unwrap()),
            ),
        ).unwrap()
        .build()
        .unwrap();

    // println!("Loaded Query String: {:?}", query_string);
    // println!("Loaded Data String: {:?}", data);

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, RDF_CONTAINS_GUEST_ELF).unwrap();
    // End proof timer
    let end = std::time::Instant::now();
    println!("Proving took {:?}", end - start);

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let outputs: Outputs = receipt.journal.decode().unwrap();

    // Log the resultant hashes
    println!("Data hash: {:?}", hex::encode(outputs.data));
    println!("Query hash: {:?}", hex::encode(outputs.query));
    println!("Result hash: {:?}", hex::encode(outputs.result));

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    // Start verification timer
    let start = std::time::Instant::now();
    receipt.verify(RDF_CONTAINS_GUEST_ID).unwrap();
    // End verification timer
    let end = std::time::Instant::now();
    println!("Output result{:?}", outputs.result_string);
    println!("");
    println!("Verification took {:?}", end - start);

    // Serialise the receipt
    let receipt_json = serde_json::to_string(&receipt).unwrap();
    // println!("Receipt: {}", receipt_json);
    std::fs::write("receipt.json", receipt_json).expect("Unable to write file");
}
